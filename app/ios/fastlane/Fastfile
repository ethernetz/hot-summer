default_platform :ios

desc "Load ASC API Key information to use in subsequent lanes"
lane :load_asc_api_key do  
   app_store_connect_api_key(
     key_id: ENV["ASC_KEY_ID"],
     issuer_id: ENV["ASC_ISSUER_ID"],
     key_content: ENV["ASC_KEY"],
     is_key_content_base64: true,
     in_house: false # detecting this via ASC private key not currently supported
   )
end

desc "Bump build number based on most recent TestFlight build number"
lane :fetch_and_increment_build_number do
 #fetch read your app identifier defined in your Appfile
 app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
 api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

 current_version = get_version_number()

 latest_build_number = latest_testflight_build_number(
   api_key: api_key,
   version: current_version,
   app_identifier: app_identifier
 )
 increment_build_number(
   build_number: (latest_build_number + 1),
 )
end


desc "Installs signing certificate in the keychain and downloads provisioning profiles from App Store Connect"
lane :prepare_signing do |options|
   team_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
   api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

   keychain_name = "signing"
   keychain_password = "temp"

   delete_keychain(
     name: keychain_name
   ) if File.exist? File.expand_path("~/Library/Keychains/#{keychain_name}-db")

   create_keychain(
     name: keychain_name,
     password: keychain_password,
     default_keychain: true,
     unlock: true,
     timeout: 3600
   )

   import_certificate(
     certificate_path: ENV["SIGNING_KEY_FILE_PATH"],
     certificate_password: ENV["SIGNING_KEY_PASSWORD"],
     keychain_name: keychain_name,
     keychain_password: keychain_password
   )

   # fetches and installs provisioning profiles from ASC
   sigh(
     adhoc: options[:adhoc],
     api_key: api_key,
   )

  update_project_provisioning(
    xcodeproj: "Runner.xcodeproj",
    build_configuration: "Release",
    code_signing_identity: "iPhone Distribution"
  )

  update_project_team(
    path: "Runner.xcodeproj",
    teamid: ENV["TEAM_ID"]
  )
 end




desc "Build the iOS app for release"
lane :build_release do |options|

  update_code_signing_settings(
   use_automatic_signing: false,
   code_sign_identity: "Apple Distribution",
   bundle_identifier: ENV["DEVELOPER_APP_IDENTIFIER"],
  )
  gym(
    workspace: "Runner.xcworkspace",
    scheme: "Runner",
    export_method: "app-store"
  )

  upload_symbols_to_crashlytics(dsym_path: ENV["DSYM_OUTPUT_PATH"])
end

desc "Upload to TestFlight / ASC"
lane :upload_release do
  ENV['ITMSTRANSPORTER_FORCE_ITMS_PACKAGE_UPLOAD'] = 'true'
  pilot(
    apple_id: ENV["ASC_APP_ID"],
    app_identifier: ENV["DEVELOPER_APP_IDENTIFIER"],
    skip_waiting_for_build_processing: true,
    skip_submission: true,
    distribute_external: false,
    notify_external_testers: false,
    ipa: "./Runner.ipa"
  )
end


desc "Build and upload to TestFlight"
lane :build_upload_testflight do
  load_asc_api_key
  prepare_signing
  fetch_and_increment_build_number
  build_release
  upload_release
end